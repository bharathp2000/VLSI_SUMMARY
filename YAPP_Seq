class yapp_tx_sequencer extends uvm_sequencer#(yapp_packet);

 
  `uvm_component_utils(yapp_tx_sequencer)

   function new(string name="yapp_tx_sequencer",uvm_component parent);
     super.new(name,parent);
   endfunction


  function void start_of_simulation_phase(uvm_phase phase);
 
   `uvm_info(get_type_name(),{"Start of simulation for",get_full_name()},UVM_HIGH);  
 
   endfunction

endclass

//Sequence

class yapp_base_seq extends uvm_sequence #(yapp_packet);
 
    `uvm_object_utils(yapp_base_seq)

    function new(string name="yapp_base_seq");
    super.new(name);
  endfunction

  task pre_body();
    uvm_phase phase;
    `ifdef UVM_VERSION_1_2
      phase = get_starting_phase();
    `else
      phase = starting_phase;
    `endif
    if (phase != null) begin
      phase.raise_objection(this, get_type_name());
      `uvm_info(get_type_name(), "raise objection", UVM_MEDIUM)
    end
  endtask : pre_body

  task post_body();
    uvm_phase phase;
    `ifdef UVM_VERSION_1_2
     
      phase = get_starting_phase();
    `else
      phase = starting_phase;
    `endif
    if (phase != null) begin
      phase.drop_objection(this, get_type_name());
      `uvm_info(get_type_name(), "drop objection", UVM_MEDIUM)
    end
  endtask : post_body

endclass : yapp_base_seq


class yapp_5_packets extends yapp_base_seq;
 
   `uvm_object_utils(yapp_5_packets)

   function new(string name="yapp_5_packets");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_5_packets sequence", UVM_LOW)
     repeat(5)
      `uvm_do(req)
  endtask
 
endclass : yapp_5_packets



class yapp_012_seq extends yapp_base_seq;
 
    `uvm_object_utils(yapp_012_seq)

   function new(string name="yapp_012_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_12_seq", UVM_LOW)
    `uvm_do_with(req,{req.addr==2'b00;})
    `uvm_do_with(req,{req.addr==2'b01;})
    `uvm_do_with(req,{req.addr==2'b10;})

  endtask
 
endclass



class yapp_1_seq extends yapp_base_seq;
 
 
  `uvm_object_utils(yapp_1_seq)

 
  function new(string name="yapp_1_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_1_seq", UVM_LOW)
    `uvm_do_with(req,{req.addr==2'b01;})
  endtask
 
endclass


class yapp_111_seq extends yapp_base_seq;
 
 
  `uvm_object_utils(yapp_111_seq)

   yapp_1_seq addr_1_seq;

 
  function new(string name="yapp_111_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_111_seq", UVM_LOW)
    `uvm_do(addr_1_seq)
  endtask
 
endclass


class yapp_repeat_addr_seq extends yapp_base_seq;
 
 
  `uvm_object_utils( yapp_repeat_addr_seq)

   rand bit[1:0] seqaddr;
   constraint legal_addr{seqaddr!=3;}
 
  function new(string name=" yapp_repeat_addr_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_repeat_addr_seq", UVM_LOW)
     repeat(2)
    `uvm_do_with(req,{req.addr==seqaddr;})
  endtask
 
endclass

class yapp_incr_payload_seq  extends yapp_base_seq;
 
 
  `uvm_object_utils(yapp_incr_payload_seq)

   
  function new(string name="yapp_incr_payload_seq");
    super.new(name);
  endfunction

   virtual task body();
    int ok;
    `uvm_info(get_type_name(), "Executing yapp_incr_payload_seq", UVM_LOW)
     `uvm_create(req)
     ok=req.randomize();
     foreach(req.payload[i])
     req.payload[i]=i;
     req.set_parity();
     `uvm_send(req)
       
   endtask
 
endclass




class yapp_rnd_seq extends yapp_base_seq;

 
  `uvm_object_utils(yapp_rnd_seq)

 
  rand int count;

 
  constraint count_limit { count inside {[1:10]}; }

    function new(string name="yapp_rnd_seq");
    super.new(name);
  endfunction

    virtual task body();
    `uvm_info(get_type_name(), $sformatf("Executing YAPP_RND_SEQ %0d times...", count), UVM_LOW)
    repeat (count) begin
      `uvm_do(req)
    end
  endtask

endclass : yapp_rnd_seq



class six_yapp_seq extends yapp_base_seq;

 
  `uvm_object_utils(six_yapp_seq)

    yapp_rnd_seq yss;

    function new(string name="six_yapp_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing SIX_YAPP_SEQ" , UVM_LOW)
    `uvm_do_with(yss, {count==6;})
  endtask

endclass : six_yapp_seq

class yapp_exhaustive_seq extends yapp_base_seq;
 
    `uvm_object_utils(yapp_exhaustive_seq)

    yapp_012_seq y012;
    yapp_1_seq  y1;
    yapp_111_seq y111;
    yapp_repeat_addr_seq yaddr;
    yapp_incr_payload_seq yinc;
    six_yapp_seq sys;
 
  function new(string name="yapp_exhaustive_seq");
    super.new(name);
  endfunction

 
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_exhaustive_seq", UVM_LOW)
    `uvm_do(y012)
    `uvm_do(y1)
    `uvm_do(y111)
    `uvm_do(yaddr)
    `uvm_do(yinc)
    `uvm_do(sys)

  endtask
 
endclass


class yapp_4_channel_seq extends yapp_base_seq;

  `uvm_object_utils(yapp_4_channel_seq)  
   
  function new(string name="yapp_4_channel_seq");
    super.new(name);
  endfunction
   
  virtual task body();
    `uvm_info(get_type_name(), "Executing yapp_4_channel_seq sequence", UVM_LOW)
    `uvm_create(req)
    req.packet_delay = 1;
    for(int add=0; add<4; add++) begin
      req.addr = add;
      for(int lgt=1; lgt<=63; lgt++) begin  
req.length = lgt;
req.payload = new[lgt];
for(int pld=0; pld<lgt; pld++)
 req.payload[pld] = pld;
 randcase
   40: req.parity_type = BAD_PARITY;
   60: req.parity_type = GOOD_PARITY;
 endcase
 req.set_parity();
 `uvm_send(req)
end
      end  
   endtask : body

endclass



//Sequencer
class yapp_tx_sequencer extends uvm_sequencer#(yapp_packet);

 
  `uvm_component_utils(yapp_tx_sequencer)

   function new(string name="yapp_tx_sequencer",uvm_component parent);
     super.new(name,parent);
   endfunction


  function void start_of_simulation_phase(uvm_phase phase);
 
   `uvm_info(get_type_name(),{"Start of simulation for",get_full_name()},UVM_HIGH);  
 
   endfunction

endclass

//Driver
class yapp_tx_driver extends uvm_driver#(yapp_packet);


  // Virtual Interface for monitoring DUT signals
   virtual interface yapp_if vif;
   int num_sent,i;

    //virutual Methods
  `uvm_component_utils_begin(yapp_tx_driver)
      `uvm_field_int(num_sent,UVM_ALL_ON)
    `uvm_component_utils_end  

   function new(string name="yapp_tx_driver",uvm_component parent);
     super.new(name,parent);
   endfunction

  function void build_phase(uvm_phase phase);
    if(!yapp_vif_config::get(this,get_full_name(),"vif",vif))
        `uvm_error( "NOVIF",{"virtual interface was set for ",get_full_name(),".vif"})
    endfunction


  function void start_of_simulation_phase(uvm_phase phase);
    `uvm_info(get_type_name(),{"Start of simulation for",get_full_name()},UVM_HIGH);  
  endfunction

  task run_phase(uvm_phase phase);
     fork
      reset_signals();
      get_and_drive();

   
    join
endtask

  task get_and_drive();
    @(posedge vif.reset);
    @(negedge vif.reset);
    `uvm_info(get_type_name(), "Reset dropped", UVM_MEDIUM)
    forever begin
      seq_item_port.get_next_item(req); // getting from seq and driving/   // need to discuss

      `uvm_info(get_type_name(), $sformatf("Sending Packet :\n%s", req.sprint()), UVM_HIGH)
       
      fork
        begin
          vif.send_to_dut(req.length, req.addr, req.parity, req.packet_delay);    //Need to discuss
            vif.payload_mem[i] = req.payload[i];
        end
        @(posedge vif.drvstart) void'(begin_tr(req, "Driver_YAPP_Packet"));
      join

      end_tr(req); //need to discuss
      num_sent++;
      seq_item_port.item_done();
    end
  endtask : get_and_drive

  task reset_signals();
    //forever
     vif.yapp_reset(); // need to discuss
  endtask : reset_signals

  function void report_phase(uvm_phase phase);
    `uvm_info(get_type_name(), $sformatf("Report: YAPP TX driver sent %0d packets", num_sent), UVM_LOW)
  endfunction

endclass


//Monitor

typedef enum bit {COV_ENABLE, COV_DISABLE} cover_e;

class yapp_tx_monitor extends uvm_monitor;

  yapp_packet pkt;

  int num_pkt_col;
    //Connecting mon to Sb by using TLM Port
  uvm_analysis_port#(yapp_packet) item_collected_port;
  cover_e coverage_control = COV_ENABLE;
  virtual interface yapp_if vif;

   //Provide implementations of virtual methods such as get_type_name and create

  `uvm_component_utils_begin(yapp_tx_monitor)
    `uvm_field_int(num_pkt_col, UVM_ALL_ON)
    `uvm_field_enum(cover_e, coverage_control, UVM_ALL_ON)
  `uvm_component_utils_end

  covergroup collected_pkts_cg;
    option.per_instance=1;
    REQ1_length: coverpoint pkt.length {
      bins MIN = {1};
      bins SMALL = {[2:10]};
      bins MEDIUM = {[11:40]};
      bins LARGE = {[41:62]};
      bins MAX = {63};
    }

    REQ2_addr : coverpoint pkt.addr {
      bins addr[] = {[0:2]};
      bins illegal = {3};
    }

    bad_parity: coverpoint pkt.parity_type {
      bins bad = {BAD_PARITY};
      bins good = default;
    }

    REQ3_cross_addr_length: cross REQ1_length, REQ2_addr;
    REQ3_cross_addr_bad_parity: cross  REQ2_addr, bad_parity;
  endgroup: collected_pkts_cg

  function new (string name, uvm_component parent);
    super.new(name, parent);
    item_collected_port = new("item_collected_port",this);
    if (coverage_control == COV_ENABLE) begin
     `uvm_info(get_type_name(),"YAPP MONITOR COVERAGE CREATED" , UVM_LOW)
      collected_pkts_cg = new();
      collected_pkts_cg.set_inst_name({get_full_name(), ".monitor_pkt"});
    end
  endfunction : new
 
  // Getting the virutal i/f Handler from config. db
  function void build_phase(uvm_phase phase);
    if (!yapp_vif_config::get(this, get_full_name(),"vif", vif))
      `uvm_error("NOVIF",{"virtual interface must be set for: ",get_full_name(),".vif"})
  endfunction: build_phase

  task run_phase(uvm_phase phase);
    @(posedge vif.reset)
    @(negedge vif.reset)
    `uvm_info(get_type_name(), "Detected Reset Done", UVM_MEDIUM)
    forever begin
      pkt = yapp_packet::type_id::create("pkt", this);

      fork
        vif.collect_packet(pkt.length, pkt.addr, pkt.payload, pkt.parity);
        @(posedge vif.monstart) void'(begin_tr(pkt, "Monitor_YAPP_Packet"));
      join

      pkt.parity_type = (pkt.parity == pkt.calc_parity()) ? GOOD_PARITY : BAD_PARITY;
      end_tr(pkt);
      `uvm_info(get_type_name(), $sformatf("Packet Collected :\n%s", pkt.sprint()), UVM_NONE)
      item_collected_port.write(pkt);
      if (coverage_control == COV_ENABLE) begin
        `uvm_info(get_type_name(),"YAPP MONITOR COVERAGE SAMPLE" , UVM_NONE)
        collected_pkts_cg.sample();
      end
      num_pkt_col++;
    end
  endtask : run_phase

  function void report_phase(uvm_phase phase);
    `uvm_info(get_type_name(), $sformatf("Report: YAPP Monitor Collected %0d Packets", num_pkt_col), UVM_LOW)
  endfunction : report_phase

endclass : yapp_tx_monitor


//Agent

class yapp_tx_agent extends uvm_agent;

   yapp_tx_sequencer sequencer ;
   yapp_tx_driver    driver;
   yapp_tx_monitor   monitor;

  `uvm_component_utils_begin(yapp_tx_agent)
      `uvm_field_enum(uvm_active_passive_enum,is_active,UVM_ALL_ON)
   `uvm_component_utils_end

   function new(string name="yapp_tx_agent",uvm_component parent);
     super.new(name,parent);
   endfunction

    function void build_phase(uvm_phase phase);
      super.build_phase(phase);
      if(is_active==UVM_ACTIVE)begin
       sequencer=yapp_tx_sequencer::type_id::create("sequencer",this);
       driver=yapp_tx_driver::type_id::create("driver",this);

     end
    monitor=yapp_tx_monitor::type_id::create("monitor",this);

    endfunction
 
   
  function void connect_phase(uvm_phase phase);
   if(is_active==UVM_ACTIVE)
     driver.seq_item_port.connect(sequencer.seq_item_export);
  endfunction

  function void start_of_simulation_phase(uvm_phase phase);
    `uvm_info(get_type_name(),{"Start of simulation for",get_full_name()},UVM_HIGH);  
  endfunction

endclass



//


class yapp_env extends uvm_env;

 
  yapp_tx_agent tx_agent;
 
  `uvm_component_utils(yapp_env)

   function new(string name="yapp_env",uvm_component parent);
     super.new(name,parent);
   endfunction


  function void build_phase(uvm_phase phase);
      super.build_phase(phase);
      tx_agent=new("tx_agent",this);
   endfunction

  function void start_of_simulation_phase(uvm_phase phase);
    `uvm_info(get_type_name(),{"Start of simulation for",get_full_name()},UVM_HIGH);  
  endfunction

 
endclass


//SB
typedef enum bit {EQUALITY, UVM} comp_t;

class router_scoreboard extends uvm_scoreboard;

   // TLM Port Declarations
   `uvm_analysis_imp_decl(_yapp)
   `uvm_analysis_imp_decl(_chan0)
   `uvm_analysis_imp_decl(_chan1)
   `uvm_analysis_imp_decl(_chan2)

   uvm_analysis_imp_yapp    #(yapp_packet, router_scoreboard) sb_yapp_in;
   uvm_analysis_imp_chan0 #(channel_packet, router_scoreboard) sb_chan0;
   uvm_analysis_imp_chan1 #(channel_packet, router_scoreboard) sb_chan1;
   uvm_analysis_imp_chan2 #(channel_packet, router_scoreboard) sb_chan2;
   
   // Scoreboard Packet Queues
   yapp_packet sb_queue0[$];
   yapp_packet sb_queue1[$];
   yapp_packet sb_queue2[$];
   
   // Scoreboard Statistics
   int packets_in,  in_dropped;
   int packets_ch0, compare_ch0, miscompare_ch0, dropped_ch0;
   int packets_ch1, compare_ch1, miscompare_ch1, dropped_ch1;
   int packets_ch2, compare_ch2, miscompare_ch2, dropped_ch2;

   // variable for comparer policy
   comp_t compare_policy = UVM;
   
   `uvm_component_utils_begin(router_scoreboard)
     `uvm_field_enum(comp_t, compare_policy, UVM_ALL_ON)
   `uvm_component_utils_end

   // Constructor
   function new(string name="", uvm_component parent=null);
     super.new(name, parent);
     sb_yapp_in = new("sb_yapp_in", this);
     sb_chan0 = new("sb_chan0", this);
     sb_chan1 = new("sb_chan1", this);
     sb_chan2 = new("sb_chan2", this);
   endfunction
     

   // custom packet compare function using inequality operators
   function bit comp_equal (input yapp_packet yp, input channel_packet cp);
      // returns first mismatch only
      if (yp.addr != cp.addr) begin
        `uvm_error("PKT_COMPARE",$sformatf("Address mismatch YAPP %0d Chan %0d",yp.addr,cp.addr))
        return(0);
      end
      if (yp.length != cp.length) begin
         `uvm_error("PKT_COMPARE",$sformatf("Length mismatch YAPP %0d Chan %0d",yp.length,cp.length))
        return(0);
      end
      foreach (yp.payload [i])
        if (yp.payload[i] != cp.payload[i]) begin
          `uvm_error("PKT_COMPARE",$sformatf("Payload[%0d] mismatch YAPP %0d Chan %0d",i,yp.payload[i],cp.payload[i]))
          return(0);
        end
      if (yp.parity != cp.parity) begin
        `uvm_error("PKT_COMPARE",$sformatf("Parity mismatch YAPP %0d Chan %0d",yp.parity,cp.parity))
        return(0);
      end
      return(1);
   endfunction

   // custom packet compare function using uvm_comparer methods
  function bit comp_uvm(input yapp_packet yp, input channel_packet cp, uvm_comparer comparer = null);
    string str;
    if (comparer == null)
      comparer = new();
    comp_uvm = comparer.compare_field("addr", yp.addr, cp.addr,2);
    comp_uvm &= comparer.compare_field("length", yp.length, cp.length,6);
    foreach (yp.payload [i]) begin
      str.itoa(i);
      comp_uvm &= comparer.compare_field({"payload[",str,"]"}, yp.payload[i], cp.payload[i],8);
    end
    comp_uvm &= comparer.compare_field("parity", yp.parity, cp.parity,8);
  endfunction

   virtual function void write_yapp(yapp_packet packet);
     yapp_packet sb_packet;
     // Make a copy for storing in the scoreboard
     $cast( sb_packet,  packet.clone());  // Clone returns uvm_object type
     packets_in++;
     case (sb_packet.addr)
        2'b00: begin
                sb_queue0.push_back(sb_packet);
                `uvm_info(get_type_name(), "Added packet to Scoreboard Queue 0", UVM_HIGH)
               end
        2'b01: begin
                sb_queue1.push_back(sb_packet);
                `uvm_info(get_type_name(), "Added packet to Scoreboard Queue 1", UVM_HIGH)
               end
        2'b10: begin
                sb_queue2.push_back(sb_packet);
                `uvm_info(get_type_name(), "Added packet to Scoreboard Queue 2", UVM_HIGH)
               end
        default: begin
                `uvm_info(get_type_name(), $sformatf("Packet Dropped: Bad Address=%d\n%s",
                                sb_packet.addr, sb_packet.sprint()), UVM_LOW)
                in_dropped++;
               end
     endcase
    endfunction
   
  // Channel 0 Packet Check (write) implementation
    virtual function void write_chan0(channel_packet packet);
      bit pktcompare;
      yapp_packet sb_packet;
      packets_ch0++;
      if( sb_queue0.size() == 0 ) begin
        `uvm_warning(get_type_name(),
        $sformatf("Scoreboard Error [EMPTY]: Received Unexpected Channel_0 Packet!\n%s", packet.sprint()))
        dropped_ch0++;
        return;
      end
     
      if (compare_policy == UVM)
        // use custom comparer with UVM methods
        pktcompare =  comp_uvm(sb_queue0[0],packet);
      else
        // use custom comparer with equality operators
        pktcompare =  comp_equal(sb_queue0[0],packet);
   
      if( pktcompare ) begin
        void'(sb_queue0.pop_front());
        `uvm_info(get_type_name(), $sformatf("Scoreboard Compare Match: Channel_0 Packet\n%s", packet.sprint()), UVM_MEDIUM)
        compare_ch0++;
      end
      else begin
        sb_packet = sb_queue0[0];
        `uvm_warning(get_type_name(), $sformatf("Scoreboard Error [MISCOMPARE]: Received Channel_0 Packet:\n%s\nExpected Channel_0 Packet:\n%s", packet.sprint(), sb_packet.sprint()))
        miscompare_ch0++;
      end
   endfunction

// Channel 1 Packet Check (write) implementation
    virtual function void write_chan1(channel_packet packet);
      bit pktcompare;
      yapp_packet sb_packet;
      packets_ch1++;
      if( sb_queue1.size() == 0 ) begin
        `uvm_warning(get_type_name(),
        $sformatf("Scoreboard Error [EMPTY]: Received Unexpected Channel_1 Packet!\n%s", packet.sprint()))
        dropped_ch1++;
        return;
      end
     
      if (compare_policy == UVM)
        // use custom comparer with UVM methods
        pktcompare =  comp_uvm(sb_queue1[0],packet);
      else
        // use custom comparer with equality operators
        pktcompare =  comp_equal(sb_queue1[0],packet);
   
      if( pktcompare ) begin
        void'(sb_queue1.pop_front());
        `uvm_info(get_type_name(), $sformatf("Scoreboard Compare Match: Channel_1 Packet\n%s", packet.sprint()), UVM_MEDIUM)
        compare_ch1++;
      end
      else begin
        sb_packet = sb_queue1[0];
        `uvm_warning(get_type_name(), $sformatf("Scoreboard Error [MISCOMPARE]: Received Channel_1 Packet:\n%s\nExpected Channel_1 Packet:\n%s", packet.sprint(), sb_packet.sprint()))
        miscompare_ch1++;
      end
   endfunction

  // Channel 2 Packet Check (write) implementation
    virtual function void write_chan2(channel_packet packet);
      bit pktcompare;
      yapp_packet sb_packet;
      packets_ch2++;
      if( sb_queue2.size() == 0 ) begin
        `uvm_warning(get_type_name(),
        $sformatf("Scoreboard Error [EMPTY]: Received Unexpected Channel_2 Packet!\n%s", packet.sprint()))
        dropped_ch2++;
        return;
      end
     
      if (compare_policy == UVM)
        // use custom comparer with UVM methods
        pktcompare =  comp_uvm(sb_queue2[0],packet);
      else
        // use custom comparer with equality operators
        pktcompare =  comp_equal(sb_queue2[0],packet);
   
      if( pktcompare ) begin
        void'(sb_queue2.pop_front());
        `uvm_info(get_type_name(), $sformatf("Scoreboard Compare Match: Channel_2 Packet\n%s", packet.sprint()), UVM_MEDIUM)
        compare_ch2++;
      end
      else begin
        sb_packet = sb_queue2[0];
        `uvm_warning(get_type_name(), $sformatf("Scoreboard Error [MISCOMPARE]: Received Channel_2 Packet:\n%s\nExpected Channel_2 Packet:\n%s", packet.sprint(), sb_packet.sprint()))
        miscompare_ch2++;
      end
   endfunction

// UVM check_phase
function void check_phase(uvm_phase phase);
  `uvm_info(get_type_name(), "Checking Router Scoreboard", UVM_LOW)
  if (sb_queue0.size() || sb_queue1.size() || sb_queue2.size())
  `uvm_error(get_type_name(), $sformatf("Check:\n\n   WARNING: Router Scoreboard Queue's NOT Empty:\n     Chan 0: %0d\n     Chan 1: %0d\n     Chan 2: %0d\n", sb_queue0.size(), sb_queue1.size(), sb_queue2.size()))
  else
  `uvm_info(get_type_name(), "Check:\n\n   Router Scoreboard Empty!\n", UVM_LOW)
endfunction : check_phase

// UVM report() phase
function void report_phase(uvm_phase phase);
  `uvm_info(get_type_name(), $sformatf("Report:\n\n   Scoreboard: Packet Statistics \n     Packets In:   %0d     Packets Dropped: %0d\n     Channel 0 Total: %0d  Pass: %0d  Miscompare: %0d  Dropped: %0d\n     Channel 1 Total: %0d  Pass: %0d  Miscompare: %0d  Dropped: %0d\n     Channel 2 Total: %0d  Pass: %0d  Miscompare: %0d  Dropped: %0d\n\n", packets_in, in_dropped, packets_ch0, compare_ch0, miscompare_ch0, dropped_ch0, packets_ch1, compare_ch1, miscompare_ch1, dropped_ch1, packets_ch2, compare_ch2, miscompare_ch2, dropped_ch2), UVM_LOW)
  if ((miscompare_ch0 + miscompare_ch1 + miscompare_ch2 + dropped_ch0 + dropped_ch1 + dropped_ch2) > 0)
    `uvm_error(get_type_name(),"Status:\n\nSimulation FAILED\n")
  else
    `uvm_info(get_type_name(),"Status:\n\nSimulation PASSED\n", UVM_NONE)
endfunction : report_phase

endclass : router_scoreboard

//iNTERFACE

import uvm_pkg::*;
`include "uvm_macros.svh"

import yapp_pkg::*;

  // Actual Signals
  logic              in_data_vld;
  logic              in_suspend;
  logic       [7:0]  in_data;

  // signal for transaction recording
  bit monstart, drvstart;

  // local storage for payload
  logic [7:0] payload_mem [0:63];
 
  task yapp_reset();
    @(posedge reset);
    in_data           <=  'hz;
    in_data_vld       <= 1'b0;
    disable send_to_dut;
  endtask
 
  // Gets a packet and drive it into the DUT
  task send_to_dut(input bit [5:0]  length,
                         bit [1:0]  addr,
                         bit [7:0]  parity,
                         int packet_delay);

    // Wait for packet delay
    repeat(packet_delay)
      @(negedge clock);

    // Start to send packet if not in_suspend signal
    @(negedge clock iff (!in_suspend));

    // trigger for transaction recording
    drvstart = 1'b1;
    // Enable start packet signal
    in_data_vld <= 1'b1;

    // Drive the Header {Length, Addr}
    in_data <= { length, addr };

in_data_vld <= 1'b0;
    in_data  <= parity;

    @(negedge  clock)
      in_data  <= 8'bz;

    // reset trigger
    drvstart = 1'b0;
  endtask : send_to_dut

  // Collect Packets
  task collect_packet(output bit [5:0]  length,
                         bit [1:0]  addr,
                         bit [7:0]  payload[],
                         bit [7:0]  parity);
      //Monitor looks at the bus on posedge (Driver uses negedge)
      //@(posedge in_data_vld);

      @(posedge clock iff (!in_suspend & in_data_vld))
      // trigger for transaction recording
      monstart = 1'b1;

      `uvm_info("YAPP_IF", "collect packets", UVM_HIGH)
      // Collect Header {Length, Addr}
      { length, addr }  = in_data;
      payload = new[length]; // Allocate the payload
      // Collect the Payload
      foreach (payload [i]) begin
         @(posedge clock iff (!in_suspend))
         payload[i] = in_data;
      end

      // Collect Parity and Compute Parity Type
       @(posedge clock iff !in_suspend)
         parity = in_data;
      // reset trigger
      monstart = 1'b0;
  endtask : collect_packet


// If the channel suspend ports are incorrectly connected/driven
// the YAPP input will be suspended and the simulation could hang.
// This assertion checks for this and raises a (non-UVM) error message
  property yapp_suspended;
    @(posedge clock) !in_suspend ##1 in_suspend[*20] |=> !in_suspend;
  endproperty

  YAPP_SUSPENDED: assert property (yapp_suspended)
      else
      begin
        $display("\n**Assertion Error - YAPP interface is suspended: Check channel suspend ports!\n");
        $finish;
      end


endinterface : yapp_if


module hw_top;

 logic[31:0] clock_period;
 logic run_clock;
 logic  clock;
 logic  reset;

 yapp_if in0(clock,reset);

 clkgen clkgen (.clock(clock),
                .reset(reset),
                .clock_period(32'd10));


  yapp_router dut(
    .reset(reset),
    .clock(clock),
    .error(),

    // YAPP interface
    .in_data(),
    .in_data_vld(),
    .in_suspend(),

    // Output Channels
    //Channel 0
    .data_0(),
    .data_vld_0(),
    .suspend_0(1'b0),
    //Channel 1
    .data_1(),
    .data_vld_1(),
    .suspend_1(1'b10),
    //Channel 2
    .data_2(),
    .data_vld_2(),
    .suspend_2(1'b0),

    // HBUS Interface
    .haddr(),
    .hdata(),
    .hen(),
    .hwr_rd());


 initial begin
  reset<=1'b0;
  @(negedge clock)
   #1 reset<=1'b1;
  @(negedge clock)
  #1 reset<=1'b0;

 end


endmodule


